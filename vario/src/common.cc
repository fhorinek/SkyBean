/*
 * common.cc
 *
 *  Created on: 7.11.2013
 *      Author: horinek
 */

#include "vario.h"

#include "common.h"
#include "profiles.h"

#include <stddef.h>

//kalman filter parameters
//default 0.001, 15.0, 30.0, 0.0
//
//float ram_kalman_q = 0.001;//0.001;
//
//float ram_kalman_r = 6.0;//15.0;
//
//float ram_kalman_p = 30.0;

//Altitude and pressure
float ram_sea_level_Pa = 101325;
float raw_pressure = 0;
float altitude0 = 0;

float temperature = 0;
float pressure = 0;
float climb = 0;

bool meas_new_sample = false;

float ram_climb_noise = 0.1;


//common and system
volatile uint16_t sys_tick_cnt = 0;

uint8_t buzzer_override = true;
uint16_t buzzer_override_tone;

//device CFG
struct profile EEMEM ee_prof[3];
struct configuration EEMEM ee_cfg;

//in ram
profile prof;
configuration cfg;

float ram_sink_begin;
float ram_lift_begin;

uint8_t sleep_now = false;


#ifdef ENABLE_DEFAULT_CFG
	#define DEFAULT_CFG_LENGTH	864
	const uint8_t default_cfg[] PROGMEM = {
		0x04, 0x00, 0x2c, 0x01, 0x00, 0x00, 0x0a, 0x00, 0x14, 0x00, 0x1e, 0x00, 0x28, 0x00, 0x32, 0x00, 0xce, 0xff, 0x9c,
		0xff, 0x6a, 0xff, 0x38, 0xff, 0x06, 0xff, 0x6f, 0x12, 0x83, 0x3a, 0x00, 0x00, 0xc0, 0x40, 0x00, 0x00, 0xf0, 0x41,
		0x19, 0x00, 0x2a, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x2a, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x83, 0x00, 0x88, 0x00, 0x8d, 0x00, 0x92, 0x00, 0x98,
		0x00, 0x9f, 0x00, 0xa7, 0x00, 0xaf, 0x00, 0xba, 0x00, 0xc6, 0x00, 0xd8, 0x00, 0xea, 0x00, 0x02, 0x01, 0x1b, 0x01,
		0x39, 0x01, 0x58, 0x01, 0x7b, 0x01, 0x9f, 0x01, 0xe9, 0x01, 0x34, 0x02, 0x78, 0x02, 0xbd, 0x02, 0xe8, 0x02, 0x14,
		0x03, 0x31, 0x03, 0x4e, 0x03, 0x66, 0x03, 0x7e, 0x03, 0x8e, 0x03, 0x9f, 0x03, 0xad, 0x03, 0xbb, 0x03, 0xca, 0x03,
		0xd9, 0x03, 0xe4, 0x03, 0xf0, 0x03, 0xfe, 0x03, 0x0d, 0x04, 0x1d, 0x04, 0x2e, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x02, 0xe9,
		0x01, 0xb6, 0x01, 0x93, 0x01, 0x70, 0x01, 0x54, 0x01, 0x38, 0x01, 0x1d, 0x01, 0x03, 0x01, 0xef, 0x00, 0xdb, 0x00,
		0xc5, 0x00, 0xb0, 0x00, 0x9d, 0x00, 0x8a, 0x00, 0x7c, 0x00, 0x6e, 0x00, 0x5f, 0x00, 0x51, 0x00, 0x46, 0x00, 0x3c,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x40, 0x01, 0x19, 0x01, 0xf2, 0x00, 0xd7, 0x00, 0xbd, 0x00, 0xac, 0x00, 0x9b, 0x00, 0x90, 0x00,
		0x86, 0x00, 0x7c, 0x00, 0x73, 0x00, 0x69, 0x00, 0x5f, 0x00, 0x55, 0x00, 0x4b, 0x00, 0x41, 0x00, 0x37, 0x00, 0x2e,
		0x00, 0x25, 0x00, 0x21, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x01, 0x53, 0x4b, 0x42, 0x45, 0x41, 0x4e, 0x44, 0x65, 0x66,
		0x61, 0x75, 0x6c, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x83, 0x00, 0x88, 0x00,
		0x8d, 0x00, 0x92, 0x00, 0x98, 0x00, 0x9f, 0x00, 0xa7, 0x00, 0xaf, 0x00, 0xba, 0x00, 0xc6, 0x00, 0xd8, 0x00, 0xea,
		0x00, 0x02, 0x01, 0x1b, 0x01, 0x39, 0x01, 0x58, 0x01, 0x7b, 0x01, 0x9f, 0x01, 0xe9, 0x01, 0x34, 0x02, 0x78, 0x02,
		0xbd, 0x02, 0xe8, 0x02, 0x14, 0x03, 0x31, 0x03, 0x4e, 0x03, 0x66, 0x03, 0x7e, 0x03, 0x8e, 0x03, 0x9f, 0x03, 0xad,
		0x03, 0xbb, 0x03, 0xca, 0x03, 0xd9, 0x03, 0xe4, 0x03, 0xf0, 0x03, 0xfe, 0x03, 0x0d, 0x04, 0x1d, 0x04, 0x2e, 0x04,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x1c, 0x02, 0xe9, 0x01, 0xb6, 0x01, 0x93, 0x01, 0x70, 0x01, 0x54, 0x01, 0x38, 0x01, 0x1d, 0x01, 0x03,
		0x01, 0xef, 0x00, 0xdb, 0x00, 0xc5, 0x00, 0xb0, 0x00, 0x9d, 0x00, 0x8a, 0x00, 0x7c, 0x00, 0x6e, 0x00, 0x5f, 0x00,
		0x51, 0x00, 0x46, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x01, 0x19, 0x01, 0xf2, 0x00, 0xd7, 0x00, 0xbd, 0x00, 0xac,
		0x00, 0x9b, 0x00, 0x90, 0x00, 0x86, 0x00, 0x7c, 0x00, 0x73, 0x00, 0x69, 0x00, 0x5f, 0x00, 0x55, 0x00, 0x4b, 0x00,
		0x41, 0x00, 0x37, 0x00, 0x2e, 0x00, 0x25, 0x00, 0x21, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x01, 0x53, 0x4b, 0x42, 0x45,
		0x41, 0x4e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f,
		0x00, 0x83, 0x00, 0x88, 0x00, 0x8d, 0x00, 0x92, 0x00, 0x98, 0x00, 0x9f, 0x00, 0xa7, 0x00, 0xaf, 0x00, 0xba, 0x00,
		0xc6, 0x00, 0xd8, 0x00, 0xea, 0x00, 0x02, 0x01, 0x1b, 0x01, 0x39, 0x01, 0x58, 0x01, 0x7b, 0x01, 0x9f, 0x01, 0xe9,
		0x01, 0x34, 0x02, 0x78, 0x02, 0xbd, 0x02, 0xe8, 0x02, 0x14, 0x03, 0x31, 0x03, 0x4e, 0x03, 0x66, 0x03, 0x7e, 0x03,
		0x8e, 0x03, 0x9f, 0x03, 0xad, 0x03, 0xbb, 0x03, 0xca, 0x03, 0xd9, 0x03, 0xe4, 0x03, 0xf0, 0x03, 0xfe, 0x03, 0x0d,
		0x04, 0x1d, 0x04, 0x2e, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x02, 0xe9, 0x01, 0xb6, 0x01, 0x93, 0x01, 0x70, 0x01, 0x54, 0x01,
		0x38, 0x01, 0x1d, 0x01, 0x03, 0x01, 0xef, 0x00, 0xdb, 0x00, 0xc5, 0x00, 0xb0, 0x00, 0x9d, 0x00, 0x8a, 0x00, 0x7c,
		0x00, 0x6e, 0x00, 0x5f, 0x00, 0x51, 0x00, 0x46, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x01, 0x19, 0x01, 0xf2, 0x00,
		0xd7, 0x00, 0xbd, 0x00, 0xac, 0x00, 0x9b, 0x00, 0x90, 0x00, 0x86, 0x00, 0x7c, 0x00, 0x73, 0x00, 0x69, 0x00, 0x5f,
		0x00, 0x55, 0x00, 0x4b, 0x00, 0x41, 0x00, 0x37, 0x00, 0x2e, 0x00, 0x25, 0x00, 0x21, 0x00, 0x1e, 0x00, 0x00, 0x00,
		0x01, 0x53, 0x4b, 0x42, 0x45, 0x41, 0x4e};
#endif



#define Check(var, min, max, def)	\
			do { \
				if (var < min || var > max) \
					var = def; \
			} while (0);

void LoadEEPROM()
{
#ifdef ENABLE_DEFAULT_CFG
	for (uint16_t i = 0; i < DEFAULT_CFG_LENGTH; i++)
	{
		uint8_t tmp = pgm_read_byte((uint8_t *)&default_cfg + i);
		eeprom_busy_wait();

		eeprom_update_byte((uint8_t *)&ee_cfg + i, tmp);

	}
#endif

	eeprom_busy_wait();

	eeprom_read_block(&cfg, &ee_cfg, sizeof(cfg));

	Check(cfg.buzzer_volume, 1, 4, 4);
	Check(cfg.supress_startup, 0, 1, 0);
	Check(cfg.auto_poweroff, 0, 3600, 60 * 5);
	Check(cfg.serial_output, 0, 10, 0);
	Check(cfg.selected_profile, 0, 2, 0);
	for (uint8_t i = 0; i < 5; i++)
	{
		Check(cfg.lift_steps[i], -1500, 1500, i * 10);
		Check(cfg.sink_steps[i], -1500, 1500, i * -50);
	}
	Check(cfg.kalman_q, 0, 10, 0.001);
	Check(cfg.kalman_r, 0, 10, 6.0);
	Check(cfg.kalman_p, 0, 100, 30.0);
	Check(cfg.int_interval, 12, 50, 25);

	eeprom_read_block(&prof, &ee_prof[cfg.selected_profile], sizeof(prof));
	for (uint8_t i = 0; i < 41; i++)
	{
		//todo: fallback table
		Check(prof.buzzer_freq[i], 0, 2000, 100);
		Check(prof.buzzer_pause[i], 0, 2000, 100);
		Check(prof.buzzer_length[i], 0, 2000, 100);
	}
	Check(prof.lift_treshold, 0, 5, 1);
	Check(prof.sink_treshold, 0, 5, 1);

	Check(prof.enabled, 0, 1, 1);


	LiftSinkRefresh();

	//NVM EE power reduction mode
	NVM.CTRLB |= 0b00000010;

}
void StoreVolume()
{
	eeprom_busy_wait();
	eeprom_update_byte(&ee_cfg.buzzer_volume, cfg.buzzer_volume);

	//NVM EE power reduction mode
	NVM.CTRLB |= 0b00000010;
}

void StoreLift()
{
	eeprom_busy_wait();
	eeprom_update_byte(&ee_prof[cfg.selected_profile].lift_treshold, prof.lift_treshold);

	//NVM EE power reduction mode
	NVM.CTRLB |= 0b00000010;
}

void StoreSink()
{
	eeprom_busy_wait();
	eeprom_update_byte(&ee_prof[cfg.selected_profile].sink_treshold, prof.sink_treshold);

	//NVM EE power reduction mode
	NVM.CTRLB |= 0b00000010;
}

void LoadProfile()
{
	eeprom_busy_wait();
	eeprom_update_byte(&ee_cfg.selected_profile, cfg.selected_profile);

	eeprom_read_block(&prof, &ee_prof[cfg.selected_profile], sizeof(prof));
	for (uint8_t i = 0; i < 41; i++)
	{
		//todo: fallback table
		Check(prof.buzzer_freq[i], 0, 2000, 100);
		Check(prof.buzzer_pause[i], 0, 2000, 100);
		Check(prof.buzzer_length[i], 0, 2000, 100);
	}
	Check(prof.lift_treshold, 0, 5, 1);
	Check(prof.sink_treshold, 0, 5, 1);

	Check(prof.enabled, 0, 1, 1);
}

ISR(rtc_overflow_interrupt)
{
	sys_tick_cnt += 1;
}

//1ms system timer for crude timing (button, battery measurement, etc...)
void sys_tick_init()
{
	RtcInit(rtc_1000Hz_ulp, rtc_div1);
	RtcEnableInterrupts(rtc_overflow);
}

uint32_t sys_tick_get()
{
	uint16_t act = RtcGetValue();

	return ((uint32_t)sys_tick_cnt << 16) | act;
}

