#ifndef SONGS
#define SONGS

//some day I will make the mario as a lift sound
//			and imperial march as sink sound !!!
//taa taa taa tu tu tu tu tu tu				:D

#define c 261
#define d 294
#define e 329
#define f 349
#define g 391
#define gS 415
#define a 440
#define aS 455
#define b 466
#define cH 523
#define cSH 554
#define dH 587
#define dSH 622
#define eH 659
#define fH 698
#define fSH 740
#define gH 784
#define gSH 830
#define aH 880

#define SW_SONG_END	70
uint8_t song_i = 0;
uint16_t sw_timing[] = {500,500,500,350,150,500,350,150,1000,500,500,500,350,150,500,350,150,1000,500,350,150,500,250,200,125,125,250,250,250,500,250,250,125,125,250,250,125,500,375,125,500,375,125,1000,500,350,150,500,250,250,125,125,250,250,250,500,250,250,125,125,250,250,250,500,375,125,500,375,125,1000};
uint16_t sw_note[] = {a, a, a, f, cH,a, f, cH, a, eH,eH, eH, fH, cH, gS, f, cH, a, aH, a, a, aH, gSH, gH, fSH, fH, fSH, 0, aS, dSH, dH, cSH, cH, b, cH, 0, f, gS, f, a, cH, a, cH, eH, aH, a, a, aH, gSH, gH, fSH, fH, fSH, 0, aS, dSH, dH, cSH, cH, b, cH, 0, f, gS, f, cH, a, f, c, a};

#define MARIO_SONG_END	156
uint8_t mario_note[] = {
    	113, 113, 113, 147, 113, 97, 197, 147, 197, 234, 170, 156,
    	166, 174, 197, 113, 98, 87, 107, 98, 113, 144, 129, 156,
    	147, 197, 234, 170, 156, 166, 174, 197, 113, 98, 87, 107,
    	98, 113, 144, 129, 156, 150, 98, 104, 110, 120, 115, 197,
    	174, 150, 174, 150, 131, 150, 98, 104, 110, 120, 115, 73,
    	73, 73, 197, 150, 98, 104, 110, 120, 115, 197, 174, 150,
    	174, 150, 131, 128, 136, 150, 197, 150, 150, 150, 150,
    	98, 104, 110, 120, 115, 197, 174, 150, 174, 150, 131,
    	150, 98, 104, 110, 120, 115, 73, 73, 73, 197, 150, 98,
    	104, 110, 120, 115, 197, 174, 150, 174, 150, 131, 128, 136,
    	150, 197, 150, 150, 150, 150, 150, 150, 150, 129, 113, 150,
    	174, 197, 150, 150, 150, 150, 129, 113, 86, 98, 150, 150,
    	150, 150, 129, 113, 150, 174, 197, 113, 113, 113, 147,
    	113, 97, 197
    };

uint8_t mario_timing[] = {
		100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 80, 100,
		100, 100, 80, 50, 100, 80, 50, 80, 80, 80, 80, 100, 100, 100,
		100, 80, 100, 100, 100, 80, 50, 100, 80, 50, 80, 80, 80, 80,
		100, 100, 100, 100, 150, 150, 100, 100, 100, 100, 100, 100,
		100, 100, 100, 100, 150, 200, 80, 80, 80, 100, 100, 100, 100,
		100, 150, 150, 100, 100, 100, 100, 100, 100, 100, 100, 100,
		100, 100, 100, 100, 100, 100, 100, 100, 150, 150, 100, 100,
		100, 100, 100, 100, 100, 100, 100, 100, 150, 200, 80, 80, 80,
		100, 100, 100, 100, 100, 150, 150, 100, 100, 100, 100, 100, 100,
		100, 100, 100, 100, 100, 100, 100, 60, 80, 60, 80, 80, 80, 80,
		80, 80, 60, 80, 60, 80, 80, 80, 80, 80, 60, 80, 60, 80, 80, 80,
		80, 80, 80, 100, 100, 100, 100, 100, 100, 100
};

uint16_t mario_delay[] = {
		150, 300, 300, 100, 300, 550, 575, 450, 400, 500, 300, 330,
		150, 300, 200, 200, 150, 300, 150, 350, 300, 150, 150, 500,
		450, 400, 500, 300, 330, 150, 300, 200, 200, 150, 300, 150,
		350, 300, 150, 150, 500, 300, 100, 150, 150, 300, 300, 150,
		150, 300, 150, 100, 220, 300, 100, 150, 150, 300, 300, 300,
		150, 300, 300, 300, 100, 150, 150, 300, 300, 150, 150, 300,
		150, 100, 420, 450, 420, 360, 300, 300, 150, 300, 300, 100,
		150, 150, 300, 300, 150, 150, 300, 150, 100, 220, 300, 100,
		150, 150, 300, 300, 300, 150, 300, 300, 300, 100, 150, 150,
		300, 300, 150, 150, 300, 150, 100, 420, 450, 420, 360, 300,
		300, 150, 300, 150, 300, 350, 150, 350, 150, 300, 150, 600,
		150, 300, 350, 150, 150, 550, 325, 600, 150, 300, 350, 150,
		350, 150, 300, 150, 600, 150, 300, 300, 100, 300, 550, 575
};

void imperial_step()
{
	if (buzzer_next_iteration <= sys_tick%get())
	{
		uint8_t index = song_i / 2;
		if (song_i % 2 == 1)
		{
			buzzer_set_tone(0);
			buzzer_next_iteration = sys_tick%get() + 10;
		}
		else
		{
			buzzer_set_tone(sw_note[index]);
			buzzer_next_iteration = sys_tick%get() + sw_timing[index];
		}

		song_i = (song_i + 1) % (SW_SONG_END * 2);
	}
}

void mario_step()
{
	if (buzzer_next_iteration <= sys_tick%get())
	{
		uint8_t index = song_i / 2;
		if (song_i % 2 == 1)
		{
			buzzer_set_tone(0);
			buzzer_next_iteration = sys_tick%get() + mario_delay[index] / 1.6;
		}
		else
		{
			buzzer_set_tone((uint32_t)74932 / (uint32_t)mario_note[index]);
			buzzer_next_iteration = sys_tick%get() + mario_timing[index] * 1.5;
		}

		song_i = (song_i + 1) % (MARIO_SONG_END * 2);
	}
}

#endif
